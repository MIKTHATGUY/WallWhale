# ==========================================
# Professional Docker Compose Configuration
# ==========================================

version: '3.8'

# Network configuration
networks:
  depot-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Shared volume configuration
volumes:
  app_logs:
    driver: local
  downloads:
    driver: local
  certs:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local

# Service definitions
services:
  # Main Application
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        NODE_ENV: ${NODE_ENV:-production}
    container_name: depot-api
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: ${PORT:-3000}
      HOST: 0.0.0.0
      DATABASE_URL: file:/app/data/depot.db
      RUN_MIGRATIONS: "true"
      # Copy all environment variables
      ADMIN_EMAIL: ${ADMIN_EMAIL:-admin@example.com}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD:-admin123}
      JWT_SECRET: ${JWT_SECRET:-your-jwt-secret-change-this}
      API_KEY_SALT: ${API_KEY_SALT:-your-api-key-salt-change-this}
      STEAM_ACCOUNTS: ${STEAM_ACCOUNTS:-account1:password1}
      SAVE_ROOT: /app/downloads
      DEPOTDOWNLOADER_PATH: /app/DepotDownloaderMod/DepotDownloaderMod.exe
      TLS_ENABLE: ${TLS_ENABLE:-false}
      TLS_KEY_PATH: ${TLS_KEY_PATH:-}
      TLS_CERT_PATH: ${TLS_CERT_PATH:-}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      ENABLE_METRICS: ${ENABLE_METRICS:-true}
      ENABLE_HEALTH_CHECKS: ${ENABLE_HEALTH_CHECKS:-true}
      DOCS_ENABLED: ${DOCS_ENABLED:-true}
    ports:
      - "${PORT:-3000}:3000"
    volumes:
      - downloads:/app/downloads
      - app_logs:/app/logs
      - certs:/app/certs
      - ./data:/app/data  # SQLite database storage
      - ./DepotDownloaderMod:/app/DepotDownloaderMod:ro
    networks:
      - depot-network
    healthcheck:
      test: ["CMD", "node", "dist/healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # Development services (can be enabled with profiles)
  # PostgreSQL Database (for production use)
  postgres:
    image: postgres:16-alpine
    container_name: depot-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER:-depot}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-depot}
      POSTGRES_DB: ${DB_NAME:-depot}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
      PGTZ: UTC
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - depot-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-depot} -d ${DB_NAME:-depot}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    profiles:
      - postgres

  # Redis Cache (Optional)
  redis:
    image: redis:7-alpine
    container_name: depot-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - depot-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    profiles:
      - redis

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: depot-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./scripts/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./scripts/nginx/conf.d:/etc/nginx/conf.d:ro
      - certs:/etc/nginx/certs:ro
      - app_logs:/var/log/nginx
    depends_on:
      - api
    networks:
      - depot-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    profiles:
      - nginx
